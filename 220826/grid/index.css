.grid {
  display: grid;
  /* 그리드 박스를 만든다.(부모역할) */
  /* row = 행 = 가로 = 가로니까 높이를 설정한다.
     column = 컬럼 = 세로 = 세로니까 너비를 설정한다. */
  grid-template-rows: 200px 200px;
  /*
   grid 박스의 세로 높이를 결정한다. 행마다의 높이를 설정한다.
   row(행)의 수만큼 입력한다. 
   */
  grid-template-columns: 100px 100px 100px;

  /* grid 박스의 가로 너비를 결정한다. 열마다의 너비를 설정한다.
   column(열)의 수만큼 입력한다. */

  grid-template-rows: repeat(2, 200px);
  grid-template-columns: repeat(3, 100px);
  /* repeat 함수는 입력을 반복해준다. (개수, 크기)로 사용 */

  grid-template-rows: 50px 200px 100px;
  grid-template-columns: repeat(5, minmax(100px, 300px));

  /* minmax 함수는 이름 그대로 최소 최대를 결정한다. 그 사이에서 알아서 조절해준다. */

  row-gap: 10px;
  /* grid 박스 안 사이에 세로 간격 만들어줌 */
  column-gap: 20px;
  /* grid 박스 안 사이에 가로 간격 만들어줌 */

  grid-auto-flow: column;
  /* grid item의 진행 방향을 설정한다. */

  /* 자로 줄을 그었다고 생각하면 편하다 */

  grid-template-areas:
    "sidebar header header header header"
    "sidebar content content content ."
    "sidebar footer footer footer footer";
  /* grid 박스에서 선언한 행열을 기준으로 맞춘다. 상단에서 3행 5열로 정의
    되어 있으므로 3행 5열만큼 areas를 선언했다. */

  /* grid-template-areas는 grid 박스를 설정한다.
    하나의 row(column설정)는 ""로 설정하고, 여러 row의 경우 줄바꿈으로 처리한다. 
    .을 설정할 경우 빈칸이 된다.
    무.조.건 사각형이여야 한다.
    item의 스타일에 grid-area와 매칭한다.
*/

  /* align-items: stretch;
  align-items: start;
  align-items: center;
  align-items: end;
   세로 기준으로 위치를 설정한다. 세로로 와리가리 */
  /*justify-items: stretch;
  justify-items: start;
  justify-items: center;
  justify-items: end; */
  /* 가로 기준으로 위치를 설정한다. 가로로 와리가리 
  */
}

.grid-item {
  border: 1px solid black;
  background-color: #ffff00;
}

.sidebar {
  grid-area: sidebar;
  /* grid-area는 부모 grid 박스의 grid-template-area와 매칭한다. */
  background-color: aqua;
  display: flex;
  justify-content: space-around;
  flex-direction: column;
}
.header {
  grid-area: header;
  background-color: forestgreen;
}
.content {
  grid-area: content;
  background-color: red;
}
.footer {
  grid-area: footer;
  background-color: cadetblue;
}

.sidebar > div {
  height: 20px;
  color: blue;
  margin-bottom: 10px;
  padding: 5px;
}

.sidebar > div:last-child {
  margin-bottom: 0;
}

.mosaic {
  display: grid;
  /* grid 박스 설정 */

  /* 기본적으로 보여질 형식 설정 */
  grid-template-columns: repeat(2, 100px);
  grid-template-rows: repeat(2, 100px);
  /* 100px의 정사각형을 4개를 2줄로 출력 */
}

.mosaic > div {
  /* grid 박스의 아이템을 눈에 보여주기 위해서 설정 */
  background-color: blueviolet;
  border: 1px solid black;
}

.mosaic-item {
  /* 기본적으로 보여지면 안될 아이템을 display:none을 사용하여 보이지 않도록
      설정한다. */
  display: none;
}
/* 마우스 오버를 감지하기 위해(마우스가 해당 영역 위에 있는지 확인하기 위해서)
hover 가상 클래스(의사 클래스)를 사용한다. */
.mosaic:hover {
  /* mosaic 클래스 위에 마우스가 올라가 있으면 해당 스타일을 적용한다. */
  /* grid-template-columns: repeat(4, 50px);
  grid-template-rows: repeat(4, 50px); */
  /* 50px의 정사각형 16개를 4줄로 출력 */
  grid-template-columns: repeat(3, 66px);
  grid-template-rows: repeat(3, 66px);
}

.mosaic:hover .mosaic-item {
  /* mosaic 클래스 위에 마우스가 있을 때 자식 중 mosaic-item 클래스를 가진
    영역에 스타일을 적용한다. */
  display: block;
  /* display: block 사용해 눈에 보이도록 설정한다. */
}
